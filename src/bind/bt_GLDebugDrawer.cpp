/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class GLDebugDrawer
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "GLDebugDrawer.h"


/** Cast (class_name)
 * 
 */
static int GLDebugDrawer__cast_(lua_State *L) {

  GLDebugDrawer *self = *((GLDebugDrawer **)dub_checksdata_n(L, 1, "bt.GLDebugDrawer"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "bt.IDebugDraw")) break;
      *retval__ = static_cast<btIDebugDraw *>(self);
      return 1;
    }
  }
  return 0;
}

/** GLDebugDrawer::GLDebugDrawer()
 * src/vendor/bullet/Demos/OpenGL/GLDebugDrawer.h:14
 */
static int GLDebugDrawer_GLDebugDrawer(lua_State *L) {
  try {
    GLDebugDrawer *retval__ = new GLDebugDrawer();
    dub_pushudata(L, retval__, "bt.GLDebugDrawer", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "new: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "new: Unknown exception");
  }
  return dub_error(L);
}

/** virtual GLDebugDrawer::~GLDebugDrawer()
 * src/vendor/bullet/Demos/OpenGL/GLDebugDrawer.h:15
 */
static int GLDebugDrawer__GLDebugDrawer(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "bt.GLDebugDrawer"));
    if (userdata->gc) {
      GLDebugDrawer *self = (GLDebugDrawer *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "__gc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "__gc: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void GLDebugDrawer::drawLine(const btVector3 &from, const btVector3 &to, const btVector3 &fromColor, const btVector3 &toColor)
 * src/vendor/bullet/Demos/OpenGL/GLDebugDrawer.h:17
 */
static int GLDebugDrawer_drawLine(lua_State *L) {
  try {
    GLDebugDrawer *self = *((GLDebugDrawer **)dub_checksdata(L, 1, "bt.GLDebugDrawer"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      btVector3 *from = *((btVector3 **)dub_checksdata(L, 2, "bt.Vector3"));
      btVector3 *to = *((btVector3 **)dub_checksdata(L, 3, "bt.Vector3"));
      btVector3 *fromColor = *((btVector3 **)dub_checksdata(L, 4, "bt.Vector3"));
      btVector3 *toColor = *((btVector3 **)dub_checksdata(L, 5, "bt.Vector3"));
      self->drawLine(*from, *to, *fromColor, *toColor);
      return 0;
    } else {
      btVector3 *from = *((btVector3 **)dub_checksdata(L, 2, "bt.Vector3"));
      btVector3 *to = *((btVector3 **)dub_checksdata(L, 3, "bt.Vector3"));
      btVector3 *color = *((btVector3 **)dub_checksdata(L, 4, "bt.Vector3"));
      self->drawLine(*from, *to, *color);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawLine: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawLine: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void GLDebugDrawer::drawSphere(const btVector3 &p, btScalar radius, const btVector3 &color)
 * src/vendor/bullet/Demos/OpenGL/GLDebugDrawer.h:21
 */
static int GLDebugDrawer_drawSphere(lua_State *L) {
  try {
    GLDebugDrawer *self = *((GLDebugDrawer **)dub_checksdata(L, 1, "bt.GLDebugDrawer"));
    btVector3 *p = *((btVector3 **)dub_checksdata(L, 2, "bt.Vector3"));
    btScalar radius = dub_checknumber(L, 3);
    btVector3 *color = *((btVector3 **)dub_checksdata(L, 4, "bt.Vector3"));
    self->drawSphere(*p, radius, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawSphere: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawSphere: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void GLDebugDrawer::drawTriangle(const btVector3 &a, const btVector3 &b, const btVector3 &c, const btVector3 &color, btScalar alpha)
 * src/vendor/bullet/Demos/OpenGL/GLDebugDrawer.h:23
 */
static int GLDebugDrawer_drawTriangle(lua_State *L) {
  try {
    GLDebugDrawer *self = *((GLDebugDrawer **)dub_checksdata(L, 1, "bt.GLDebugDrawer"));
    btVector3 *a = *((btVector3 **)dub_checksdata(L, 2, "bt.Vector3"));
    btVector3 *b = *((btVector3 **)dub_checksdata(L, 3, "bt.Vector3"));
    btVector3 *c = *((btVector3 **)dub_checksdata(L, 4, "bt.Vector3"));
    btVector3 *color = *((btVector3 **)dub_checksdata(L, 5, "bt.Vector3"));
    btScalar alpha = dub_checknumber(L, 6);
    self->drawTriangle(*a, *b, *c, *color, alpha);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawTriangle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawTriangle: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void GLDebugDrawer::drawContactPoint(const btVector3 &PointOnB, const btVector3 &normalOnB, btScalar distance, int lifeTime, const btVector3 &color)
 * src/vendor/bullet/Demos/OpenGL/GLDebugDrawer.h:25
 */
static int GLDebugDrawer_drawContactPoint(lua_State *L) {
  try {
    GLDebugDrawer *self = *((GLDebugDrawer **)dub_checksdata(L, 1, "bt.GLDebugDrawer"));
    btVector3 *PointOnB = *((btVector3 **)dub_checksdata(L, 2, "bt.Vector3"));
    btVector3 *normalOnB = *((btVector3 **)dub_checksdata(L, 3, "bt.Vector3"));
    btScalar distance = dub_checknumber(L, 4);
    int lifeTime = dub_checkint(L, 5);
    btVector3 *color = *((btVector3 **)dub_checksdata(L, 6, "bt.Vector3"));
    self->drawContactPoint(*PointOnB, *normalOnB, distance, lifeTime, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawContactPoint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawContactPoint: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void GLDebugDrawer::reportErrorWarning(const char *warningString)
 * src/vendor/bullet/Demos/OpenGL/GLDebugDrawer.h:27
 */
static int GLDebugDrawer_reportErrorWarning(lua_State *L) {
  try {
    GLDebugDrawer *self = *((GLDebugDrawer **)dub_checksdata(L, 1, "bt.GLDebugDrawer"));
    const char *warningString = dub_checkstring(L, 2);
    self->reportErrorWarning(warningString);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "reportErrorWarning: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "reportErrorWarning: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void GLDebugDrawer::draw3dText(const btVector3 &location, const char *textString)
 * src/vendor/bullet/Demos/OpenGL/GLDebugDrawer.h:29
 */
static int GLDebugDrawer_draw3dText(lua_State *L) {
  try {
    GLDebugDrawer *self = *((GLDebugDrawer **)dub_checksdata(L, 1, "bt.GLDebugDrawer"));
    btVector3 *location = *((btVector3 **)dub_checksdata(L, 2, "bt.Vector3"));
    const char *textString = dub_checkstring(L, 3);
    self->draw3dText(*location, textString);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "draw3dText: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "draw3dText: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void GLDebugDrawer::setDebugMode(int debugMode)
 * src/vendor/bullet/Demos/OpenGL/GLDebugDrawer.h:31
 */
static int GLDebugDrawer_setDebugMode(lua_State *L) {
  try {
    GLDebugDrawer *self = *((GLDebugDrawer **)dub_checksdata(L, 1, "bt.GLDebugDrawer"));
    int debugMode = dub_checkint(L, 2);
    self->setDebugMode(debugMode);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setDebugMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setDebugMode: Unknown exception");
  }
  return dub_error(L);
}

/** virtual int GLDebugDrawer::getDebugMode() const
 * src/vendor/bullet/Demos/OpenGL/GLDebugDrawer.h:33
 */
static int GLDebugDrawer_getDebugMode(lua_State *L) {
  try {
    GLDebugDrawer *self = *((GLDebugDrawer **)dub_checksdata(L, 1, "bt.GLDebugDrawer"));
    lua_pushnumber(L, self->getDebugMode());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getDebugMode: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getDebugMode: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btIDebugDraw::drawAabb(const btVector3 &from, const btVector3 &to, const btVector3 &color)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:120
 */
static int GLDebugDrawer_drawAabb(lua_State *L) {
  try {
    GLDebugDrawer *self = *((GLDebugDrawer **)dub_checksdata(L, 1, "bt.GLDebugDrawer"));
    btVector3 *from = *((btVector3 **)dub_checksdata(L, 2, "bt.Vector3"));
    btVector3 *to = *((btVector3 **)dub_checksdata(L, 3, "bt.Vector3"));
    btVector3 *color = *((btVector3 **)dub_checksdata(L, 4, "bt.Vector3"));
    self->drawAabb(*from, *to, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawAabb: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawAabb: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btIDebugDraw::drawTransform(const btTransform &transform, btScalar orthoLen)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:149
 */
static int GLDebugDrawer_drawTransform(lua_State *L) {
  try {
    GLDebugDrawer *self = *((GLDebugDrawer **)dub_checksdata(L, 1, "bt.GLDebugDrawer"));
    btTransform *transform = *((btTransform **)dub_checksdata(L, 2, "bt.Transform"));
    btScalar orthoLen = dub_checknumber(L, 3);
    self->drawTransform(*transform, orthoLen);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawTransform: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawTransform: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btIDebugDraw::drawArc(const btVector3 &center, const btVector3 &normal, const btVector3 &axis, btScalar radiusA, btScalar radiusB, btScalar minAngle, btScalar maxAngle, const btVector3 &color, bool drawSect, btScalar stepDegrees=btScalar(10.f))
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:158
 */
static int GLDebugDrawer_drawArc(lua_State *L) {
  try {
    GLDebugDrawer *self = *((GLDebugDrawer **)dub_checksdata(L, 1, "bt.GLDebugDrawer"));
    int top__ = lua_gettop(L);
    if (top__ >= 11) {
      btVector3 *center = *((btVector3 **)dub_checksdata(L, 2, "bt.Vector3"));
      btVector3 *normal = *((btVector3 **)dub_checksdata(L, 3, "bt.Vector3"));
      btVector3 *axis = *((btVector3 **)dub_checksdata(L, 4, "bt.Vector3"));
      btScalar radiusA = dub_checknumber(L, 5);
      btScalar radiusB = dub_checknumber(L, 6);
      btScalar minAngle = dub_checknumber(L, 7);
      btScalar maxAngle = dub_checknumber(L, 8);
      btVector3 *color = *((btVector3 **)dub_checksdata(L, 9, "bt.Vector3"));
      bool drawSect = dub_checkboolean(L, 10);
      btScalar stepDegrees = dub_checknumber(L, 11);
      self->drawArc(*center, *normal, *axis, radiusA, radiusB, minAngle, maxAngle, *color, drawSect, stepDegrees);
      return 0;
    } else {
      btVector3 *center = *((btVector3 **)dub_checksdata(L, 2, "bt.Vector3"));
      btVector3 *normal = *((btVector3 **)dub_checksdata(L, 3, "bt.Vector3"));
      btVector3 *axis = *((btVector3 **)dub_checksdata(L, 4, "bt.Vector3"));
      btScalar radiusA = dub_checknumber(L, 5);
      btScalar radiusB = dub_checknumber(L, 6);
      btScalar minAngle = dub_checknumber(L, 7);
      btScalar maxAngle = dub_checknumber(L, 8);
      btVector3 *color = *((btVector3 **)dub_checksdata(L, 9, "bt.Vector3"));
      bool drawSect = dub_checkboolean(L, 10);
      self->drawArc(*center, *normal, *axis, radiusA, radiusB, minAngle, maxAngle, *color, drawSect);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawArc: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawArc: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btIDebugDraw::drawSpherePatch(const btVector3 &center, const btVector3 &up, const btVector3 &axis, btScalar radius, btScalar minTh, btScalar maxTh, btScalar minPs, btScalar maxPs, const btVector3 &color, btScalar stepDegrees=btScalar(10.f))
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:183
 */
static int GLDebugDrawer_drawSpherePatch(lua_State *L) {
  try {
    GLDebugDrawer *self = *((GLDebugDrawer **)dub_checksdata(L, 1, "bt.GLDebugDrawer"));
    int top__ = lua_gettop(L);
    if (top__ >= 11) {
      btVector3 *center = *((btVector3 **)dub_checksdata(L, 2, "bt.Vector3"));
      btVector3 *up = *((btVector3 **)dub_checksdata(L, 3, "bt.Vector3"));
      btVector3 *axis = *((btVector3 **)dub_checksdata(L, 4, "bt.Vector3"));
      btScalar radius = dub_checknumber(L, 5);
      btScalar minTh = dub_checknumber(L, 6);
      btScalar maxTh = dub_checknumber(L, 7);
      btScalar minPs = dub_checknumber(L, 8);
      btScalar maxPs = dub_checknumber(L, 9);
      btVector3 *color = *((btVector3 **)dub_checksdata(L, 10, "bt.Vector3"));
      btScalar stepDegrees = dub_checknumber(L, 11);
      self->drawSpherePatch(*center, *up, *axis, radius, minTh, maxTh, minPs, maxPs, *color, stepDegrees);
      return 0;
    } else {
      btVector3 *center = *((btVector3 **)dub_checksdata(L, 2, "bt.Vector3"));
      btVector3 *up = *((btVector3 **)dub_checksdata(L, 3, "bt.Vector3"));
      btVector3 *axis = *((btVector3 **)dub_checksdata(L, 4, "bt.Vector3"));
      btScalar radius = dub_checknumber(L, 5);
      btScalar minTh = dub_checknumber(L, 6);
      btScalar maxTh = dub_checknumber(L, 7);
      btScalar minPs = dub_checknumber(L, 8);
      btScalar maxPs = dub_checknumber(L, 9);
      btVector3 *color = *((btVector3 **)dub_checksdata(L, 10, "bt.Vector3"));
      self->drawSpherePatch(*center, *up, *axis, radius, minTh, maxTh, minPs, maxPs, *color);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawSpherePatch: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawSpherePatch: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btIDebugDraw::drawBox(const btVector3 &bbMin, const btVector3 &bbMax, const btVector3 &color)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:285
 */
static int GLDebugDrawer_drawBox(lua_State *L) {
  try {
    GLDebugDrawer *self = *((GLDebugDrawer **)dub_checksdata(L, 1, "bt.GLDebugDrawer"));
    int top__ = lua_gettop(L);
    if (top__ >= 5) {
      btVector3 *bbMin = *((btVector3 **)dub_checksdata(L, 2, "bt.Vector3"));
      btVector3 *bbMax = *((btVector3 **)dub_checksdata(L, 3, "bt.Vector3"));
      btTransform *trans = *((btTransform **)dub_checksdata(L, 4, "bt.Transform"));
      btVector3 *color = *((btVector3 **)dub_checksdata(L, 5, "bt.Vector3"));
      self->drawBox(*bbMin, *bbMax, *trans, *color);
      return 0;
    } else {
      btVector3 *bbMin = *((btVector3 **)dub_checksdata(L, 2, "bt.Vector3"));
      btVector3 *bbMax = *((btVector3 **)dub_checksdata(L, 3, "bt.Vector3"));
      btVector3 *color = *((btVector3 **)dub_checksdata(L, 4, "bt.Vector3"));
      self->drawBox(*bbMin, *bbMax, *color);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawBox: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawBox: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btIDebugDraw::drawCapsule(btScalar radius, btScalar halfHeight, int upAxis, const btTransform &transform, const btVector3 &color)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:316
 */
static int GLDebugDrawer_drawCapsule(lua_State *L) {
  try {
    GLDebugDrawer *self = *((GLDebugDrawer **)dub_checksdata(L, 1, "bt.GLDebugDrawer"));
    btScalar radius = dub_checknumber(L, 2);
    btScalar halfHeight = dub_checknumber(L, 3);
    int upAxis = dub_checkint(L, 4);
    btTransform *transform = *((btTransform **)dub_checksdata(L, 5, "bt.Transform"));
    btVector3 *color = *((btVector3 **)dub_checksdata(L, 6, "bt.Vector3"));
    self->drawCapsule(radius, halfHeight, upAxis, *transform, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawCapsule: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawCapsule: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btIDebugDraw::drawCylinder(btScalar radius, btScalar halfHeight, int upAxis, const btTransform &transform, const btVector3 &color)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:359
 */
static int GLDebugDrawer_drawCylinder(lua_State *L) {
  try {
    GLDebugDrawer *self = *((GLDebugDrawer **)dub_checksdata(L, 1, "bt.GLDebugDrawer"));
    btScalar radius = dub_checknumber(L, 2);
    btScalar halfHeight = dub_checknumber(L, 3);
    int upAxis = dub_checkint(L, 4);
    btTransform *transform = *((btTransform **)dub_checksdata(L, 5, "bt.Transform"));
    btVector3 *color = *((btVector3 **)dub_checksdata(L, 6, "bt.Vector3"));
    self->drawCylinder(radius, halfHeight, upAxis, *transform, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawCylinder: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawCylinder: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btIDebugDraw::drawCone(btScalar radius, btScalar height, int upAxis, const btTransform &transform, const btVector3 &color)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:378
 */
static int GLDebugDrawer_drawCone(lua_State *L) {
  try {
    GLDebugDrawer *self = *((GLDebugDrawer **)dub_checksdata(L, 1, "bt.GLDebugDrawer"));
    btScalar radius = dub_checknumber(L, 2);
    btScalar height = dub_checknumber(L, 3);
    int upAxis = dub_checkint(L, 4);
    btTransform *transform = *((btTransform **)dub_checksdata(L, 5, "bt.Transform"));
    btVector3 *color = *((btVector3 **)dub_checksdata(L, 6, "bt.Vector3"));
    self->drawCone(radius, height, upAxis, *transform, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawCone: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawCone: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btIDebugDraw::drawPlane(const btVector3 &planeNormal, btScalar planeConst, const btTransform &transform, const btVector3 &color)
 * src/vendor/bullet/src/LinearMath/btIDebugDraw.h:403
 */
static int GLDebugDrawer_drawPlane(lua_State *L) {
  try {
    GLDebugDrawer *self = *((GLDebugDrawer **)dub_checksdata(L, 1, "bt.GLDebugDrawer"));
    btVector3 *planeNormal = *((btVector3 **)dub_checksdata(L, 2, "bt.Vector3"));
    btScalar planeConst = dub_checknumber(L, 3);
    btTransform *transform = *((btTransform **)dub_checksdata(L, 4, "bt.Transform"));
    btVector3 *color = *((btVector3 **)dub_checksdata(L, 5, "bt.Vector3"));
    self->drawPlane(*planeNormal, planeConst, *transform, *color);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "drawPlane: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "drawPlane: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int GLDebugDrawer___tostring(lua_State *L) {
  GLDebugDrawer *self = *((GLDebugDrawer **)dub_checksdata_n(L, 1, "bt.GLDebugDrawer"));
  lua_pushfstring(L, "bt.GLDebugDrawer: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg GLDebugDrawer_member_methods[] = {
  { "_cast_"       , GLDebugDrawer__cast_ },
  { "new"          , GLDebugDrawer_GLDebugDrawer },
  { "__gc"         , GLDebugDrawer__GLDebugDrawer },
  { "drawLine"     , GLDebugDrawer_drawLine },
  { "drawSphere"   , GLDebugDrawer_drawSphere },
  { "drawTriangle" , GLDebugDrawer_drawTriangle },
  { "drawContactPoint", GLDebugDrawer_drawContactPoint },
  { "reportErrorWarning", GLDebugDrawer_reportErrorWarning },
  { "draw3dText"   , GLDebugDrawer_draw3dText },
  { "setDebugMode" , GLDebugDrawer_setDebugMode },
  { "getDebugMode" , GLDebugDrawer_getDebugMode },
  { "drawAabb"     , GLDebugDrawer_drawAabb },
  { "drawTransform", GLDebugDrawer_drawTransform },
  { "drawArc"      , GLDebugDrawer_drawArc },
  { "drawSpherePatch", GLDebugDrawer_drawSpherePatch },
  { "drawBox"      , GLDebugDrawer_drawBox },
  { "drawCapsule"  , GLDebugDrawer_drawCapsule },
  { "drawCylinder" , GLDebugDrawer_drawCylinder },
  { "drawCone"     , GLDebugDrawer_drawCone },
  { "drawPlane"    , GLDebugDrawer_drawPlane },
  { "__tostring"   , GLDebugDrawer___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_bt_GLDebugDrawer(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "bt.GLDebugDrawer");
  // <mt>

  // register member methods
  luaL_register(L, NULL, GLDebugDrawer_member_methods);
  // save meta-table in bt
  dub_register(L, "bt", "GLDebugDrawer", "GLDebugDrawer");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
