/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class btSequentialImpulseConstraintSolver
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.h"


/** Cast (class_name)
 * 
 */
static int btSequentialImpulseConstraintSolver__cast_(lua_State *L) {

  btSequentialImpulseConstraintSolver *self = *((btSequentialImpulseConstraintSolver **)dub_checksdata_n(L, 1, "bt.SequentialImpulseConstraintSolver"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 0: {
      if (DUB_ASSERT_KEY(key, "bt.ConstraintSolver")) break;
      *retval__ = static_cast<btConstraintSolver *>(self);
      return 1;
    }
  }
  return 0;
}

/** btSequentialImpulseConstraintSolver::btSequentialImpulseConstraintSolver()
 * src/vendor/bullet/src/BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.h:112
 */
static int btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver(lua_State *L) {
  try {
    btSequentialImpulseConstraintSolver *retval__ = new btSequentialImpulseConstraintSolver();
    dub_pushudata(L, retval__, "bt.SequentialImpulseConstraintSolver", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "btSequentialImpulseConstraintSolver: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "btSequentialImpulseConstraintSolver: Unknown exception");
  }
  return dub_error(L);
}

/** virtual btSequentialImpulseConstraintSolver::~btSequentialImpulseConstraintSolver()
 * src/vendor/bullet/src/BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.h:113
 */
static int btSequentialImpulseConstraintSolver__btSequentialImpulseConstraintSolver(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "bt.SequentialImpulseConstraintSolver"));
    if (userdata->gc) {
      btSequentialImpulseConstraintSolver *self = (btSequentialImpulseConstraintSolver *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~btSequentialImpulseConstraintSolver: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~btSequentialImpulseConstraintSolver: Unknown exception");
  }
  return dub_error(L);
}

/** virtual btScalar btSequentialImpulseConstraintSolver::solveGroup(btCollisionObject **bodies, int numBodies, btPersistentManifold **manifold, int numManifolds, btTypedConstraint **constraints, int numConstraints, const btContactSolverInfo &info, btIDebugDraw *debugDrawer, btStackAlloc *stackAlloc, btDispatcher *dispatcher)
 * src/vendor/bullet/src/BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.h:115
 */
static int btSequentialImpulseConstraintSolver_solveGroup(lua_State *L) {
  try {
    btSequentialImpulseConstraintSolver *self = *((btSequentialImpulseConstraintSolver **)dub_checksdata(L, 1, "bt.SequentialImpulseConstraintSolver"));
    btCollisionObject* *bodies = *((btCollisionObject* **)dub_checksdata(L, 2, "CollisionObject* *"));
    int numBodies = dub_checkint(L, 3);
    btPersistentManifold* *manifold = *((btPersistentManifold* **)dub_checksdata(L, 4, "PersistentManifold* *"));
    int numManifolds = dub_checkint(L, 5);
    btTypedConstraint* *constraints = *((btTypedConstraint* **)dub_checksdata(L, 6, "TypedConstraint* *"));
    int numConstraints = dub_checkint(L, 7);
    btContactSolverInfo *info = *((btContactSolverInfo **)dub_checksdata(L, 8, "ContactSolverInfo"));
    btIDebugDraw *debugDrawer = *((btIDebugDraw **)dub_checksdata(L, 9, "IDebugDraw *"));
    btStackAlloc *stackAlloc = *((btStackAlloc **)dub_checksdata(L, 10, "StackAlloc *"));
    btDispatcher *dispatcher = *((btDispatcher **)dub_checksdata(L, 11, "bt.Dispatcher"));
    lua_pushnumber(L, self->solveGroup(bodies, numBodies, manifold, numManifolds, constraints, numConstraints, *info, debugDrawer, stackAlloc, dispatcher));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "solveGroup: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "solveGroup: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btSequentialImpulseConstraintSolver::reset()
 * src/vendor/bullet/src/BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.h:120
 */
static int btSequentialImpulseConstraintSolver_reset(lua_State *L) {
  try {
    btSequentialImpulseConstraintSolver *self = *((btSequentialImpulseConstraintSolver **)dub_checksdata(L, 1, "bt.SequentialImpulseConstraintSolver"));
    self->reset();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "reset: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "reset: Unknown exception");
  }
  return dub_error(L);
}

/** unsigned long btSequentialImpulseConstraintSolver::btRand2()
 * src/vendor/bullet/src/BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.h:122
 */
static int btSequentialImpulseConstraintSolver_btRand2(lua_State *L) {
  try {
    btSequentialImpulseConstraintSolver *self = *((btSequentialImpulseConstraintSolver **)dub_checksdata(L, 1, "bt.SequentialImpulseConstraintSolver"));
    dub_pushudata(L, new unsigned long(self->btRand2()), "unsigned long", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "btRand2: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "btRand2: Unknown exception");
  }
  return dub_error(L);
}

/** int btSequentialImpulseConstraintSolver::btRandInt2(int n)
 * src/vendor/bullet/src/BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.h:124
 */
static int btSequentialImpulseConstraintSolver_btRandInt2(lua_State *L) {
  try {
    btSequentialImpulseConstraintSolver *self = *((btSequentialImpulseConstraintSolver **)dub_checksdata(L, 1, "bt.SequentialImpulseConstraintSolver"));
    int n = dub_checkint(L, 2);
    lua_pushnumber(L, self->btRandInt2(n));
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "btRandInt2: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "btRandInt2: Unknown exception");
  }
  return dub_error(L);
}

/** void btSequentialImpulseConstraintSolver::setRandSeed(unsigned long seed)
 * src/vendor/bullet/src/BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.h:127
 */
static int btSequentialImpulseConstraintSolver_setRandSeed(lua_State *L) {
  try {
    btSequentialImpulseConstraintSolver *self = *((btSequentialImpulseConstraintSolver **)dub_checksdata(L, 1, "bt.SequentialImpulseConstraintSolver"));
    unsigned long *seed = *((unsigned long **)dub_checksdata(L, 2, "unsigned long"));
    self->setRandSeed(*seed);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setRandSeed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setRandSeed: Unknown exception");
  }
  return dub_error(L);
}

/** unsigned long btSequentialImpulseConstraintSolver::getRandSeed() const
 * src/vendor/bullet/src/BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.h:131
 */
static int btSequentialImpulseConstraintSolver_getRandSeed(lua_State *L) {
  try {
    btSequentialImpulseConstraintSolver *self = *((btSequentialImpulseConstraintSolver **)dub_checksdata(L, 1, "bt.SequentialImpulseConstraintSolver"));
    dub_pushudata(L, new unsigned long(self->getRandSeed()), "unsigned long", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getRandSeed: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getRandSeed: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btConstraintSolver::prepareSolve(int, int)
 * src/vendor/bullet/src/BulletDynamics/ConstraintSolver/btConstraintSolver.h:38
 */
static int btSequentialImpulseConstraintSolver_prepareSolve(lua_State *L) {
  try {
    btSequentialImpulseConstraintSolver *self = *((btSequentialImpulseConstraintSolver **)dub_checksdata(L, 1, "bt.SequentialImpulseConstraintSolver"));
    int p1 = dub_checkint(L, 2);
    int p2 = dub_checkint(L, 3);
    self->prepareSolve(p1, p2);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "prepareSolve: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "prepareSolve: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btConstraintSolver::allSolved(const btContactSolverInfo &, class btIDebugDraw *, btStackAlloc *)
 * src/vendor/bullet/src/BulletDynamics/ConstraintSolver/btConstraintSolver.h:43
 */
static int btSequentialImpulseConstraintSolver_allSolved(lua_State *L) {
  try {
    btSequentialImpulseConstraintSolver *self = *((btSequentialImpulseConstraintSolver **)dub_checksdata(L, 1, "bt.SequentialImpulseConstraintSolver"));
    btContactSolverInfo *p1 = *((btContactSolverInfo **)dub_checksdata(L, 2, "ContactSolverInfo"));
    class btIDebugDraw *p2 = *((class btIDebugDraw **)dub_checksdata(L, 3, "class btIDebugDraw *"));
    btStackAlloc *p3 = *((btStackAlloc **)dub_checksdata(L, 4, "StackAlloc *"));
    self->allSolved(*p1, p2, p3);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "allSolved: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "allSolved: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int btSequentialImpulseConstraintSolver___tostring(lua_State *L) {
  btSequentialImpulseConstraintSolver *self = *((btSequentialImpulseConstraintSolver **)dub_checksdata_n(L, 1, "bt.SequentialImpulseConstraintSolver"));
  lua_pushfstring(L, "bt.SequentialImpulseConstraintSolver: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg btSequentialImpulseConstraintSolver_member_methods[] = {
  { "_cast_"       , btSequentialImpulseConstraintSolver__cast_ },
  { "new"          , btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver },
  { "__gc"         , btSequentialImpulseConstraintSolver__btSequentialImpulseConstraintSolver },
  { "solveGroup"   , btSequentialImpulseConstraintSolver_solveGroup },
  { "reset"        , btSequentialImpulseConstraintSolver_reset },
  { "btRand2"      , btSequentialImpulseConstraintSolver_btRand2 },
  { "btRandInt2"   , btSequentialImpulseConstraintSolver_btRandInt2 },
  { "setRandSeed"  , btSequentialImpulseConstraintSolver_setRandSeed },
  { "getRandSeed"  , btSequentialImpulseConstraintSolver_getRandSeed },
  { "prepareSolve" , btSequentialImpulseConstraintSolver_prepareSolve },
  { "allSolved"    , btSequentialImpulseConstraintSolver_allSolved },
  { "__tostring"   , btSequentialImpulseConstraintSolver___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_bt_SequentialImpulseConstraintSolver(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "bt.SequentialImpulseConstraintSolver");
  // <mt>

  // register member methods
  luaL_register(L, NULL, btSequentialImpulseConstraintSolver_member_methods);
  // save meta-table in bt
  dub_register(L, "bt", "SequentialImpulseConstraintSolver", "SequentialImpulseConstraintSolver");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
