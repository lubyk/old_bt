/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class btHingeConstraint
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "BulletDynamics/ConstraintSolver/btHingeConstraint.h"


/** ~btHingeConstraint()
 * 
 */
static int btHingeConstraint__btHingeConstraint(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "bt.HingeConstraint"));
    if (userdata->gc) {
      btHingeConstraint *self = (btHingeConstraint *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~btHingeConstraint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~btHingeConstraint: Unknown exception");
  }
  return dub_error(L);
}

/** Cast (class_name)
 * 
 */
static int btHingeConstraint__cast_(lua_State *L) {

  btHingeConstraint *self = *((btHingeConstraint **)dub_checksdata_n(L, 1, "bt.HingeConstraint"));
  const char *key = luaL_checkstring(L, 2);
  void **retval__ = (void**)lua_newuserdata(L, sizeof(void*));
  int key_h = dub_hash(key, 2);
  switch(key_h) {
    case 1: {
      if (DUB_ASSERT_KEY(key, "bt.TypedConstraint")) break;
      *retval__ = static_cast<btTypedConstraint *>(self);
      return 1;
    }
  }
  return 0;
}

/** btHingeConstraint::btHingeConstraint(btRigidBody &rbA, const btTransform &rbAFrame, bool useReferenceFrameA=false)
 * bind/btHingeConstraint.h:7
 */
static int btHingeConstraint_btHingeConstraint(lua_State *L) {
  try {
    int top__ = lua_gettop(L);
    if (top__ >= 7) {
      btRigidBody *rbA = *((btRigidBody **)dub_checksdata(L, 1, "bt.RigidBody"));
      btRigidBody *rbB = *((btRigidBody **)dub_checksdata(L, 2, "bt.RigidBody"));
      btVector3 *pivotInA = *((btVector3 **)dub_checksdata(L, 3, "bt.Vector3"));
      btVector3 *pivotInB = *((btVector3 **)dub_checksdata(L, 4, "bt.Vector3"));
      btVector3 *axisInA = *((btVector3 **)dub_checksdata(L, 5, "bt.Vector3"));
      btVector3 *axisInB = *((btVector3 **)dub_checksdata(L, 6, "bt.Vector3"));
      bool useReferenceFrameA = dub_checkboolean(L, 7);
      btHingeConstraint *retval__ = new btHingeConstraint(*rbA, *rbB, *pivotInA, *pivotInB, *axisInA, *axisInB, useReferenceFrameA);
      dub_pushudata(L, retval__, "bt.HingeConstraint", true);
      return 1;
    } else if (top__ >= 6) {
      btRigidBody *rbA = *((btRigidBody **)dub_checksdata(L, 1, "bt.RigidBody"));
      btRigidBody *rbB = *((btRigidBody **)dub_checksdata(L, 2, "bt.RigidBody"));
      btVector3 *pivotInA = *((btVector3 **)dub_checksdata(L, 3, "bt.Vector3"));
      btVector3 *pivotInB = *((btVector3 **)dub_checksdata(L, 4, "bt.Vector3"));
      btVector3 *axisInA = *((btVector3 **)dub_checksdata(L, 5, "bt.Vector3"));
      btVector3 *axisInB = *((btVector3 **)dub_checksdata(L, 6, "bt.Vector3"));
      btHingeConstraint *retval__ = new btHingeConstraint(*rbA, *rbB, *pivotInA, *pivotInB, *axisInA, *axisInB);
      dub_pushudata(L, retval__, "bt.HingeConstraint", true);
      return 1;
    } else if (top__ >= 5) {
      btRigidBody *rbA = *((btRigidBody **)dub_checksdata(L, 1, "bt.RigidBody"));
      btRigidBody *rbB = *((btRigidBody **)dub_checksdata(L, 2, "bt.RigidBody"));
      btTransform *rbAFrame = *((btTransform **)dub_checksdata(L, 3, "bt.Transform"));
      btTransform *rbBFrame = *((btTransform **)dub_checksdata(L, 4, "bt.Transform"));
      bool useReferenceFrameA = dub_checkboolean(L, 5);
      btHingeConstraint *retval__ = new btHingeConstraint(*rbA, *rbB, *rbAFrame, *rbBFrame, useReferenceFrameA);
      dub_pushudata(L, retval__, "bt.HingeConstraint", true);
      return 1;
    } else if (top__ >= 4) {
      int type__ = lua_type(L, 4);
      if (type__ == LUA_TBOOLEAN) {
        btRigidBody *rbA = *((btRigidBody **)dub_checksdata(L, 1, "bt.RigidBody"));
        btVector3 *pivotInA = *((btVector3 **)dub_checksdata(L, 2, "bt.Vector3"));
        btVector3 *axisInA = *((btVector3 **)dub_checksdata(L, 3, "bt.Vector3"));
        bool useReferenceFrameA = dub_checkboolean(L, 4);
        btHingeConstraint *retval__ = new btHingeConstraint(*rbA, *pivotInA, *axisInA, useReferenceFrameA);
        dub_pushudata(L, retval__, "bt.HingeConstraint", true);
        return 1;
      } else {
        btRigidBody *rbA = *((btRigidBody **)dub_checksdata(L, 1, "bt.RigidBody"));
        btRigidBody *rbB = *((btRigidBody **)dub_checksdata(L, 2, "bt.RigidBody"));
        btTransform *rbAFrame = *((btTransform **)dub_checksdata(L, 3, "bt.Transform"));
        btTransform *rbBFrame = *((btTransform **)dub_checksdata(L, 4, "bt.Transform"));
        btHingeConstraint *retval__ = new btHingeConstraint(*rbA, *rbB, *rbAFrame, *rbBFrame);
        dub_pushudata(L, retval__, "bt.HingeConstraint", true);
        return 1;
      }
    } else if (top__ >= 3) {
      int type__ = lua_type(L, 3);
      if (type__ == LUA_TBOOLEAN) {
        btRigidBody *rbA = *((btRigidBody **)dub_checksdata(L, 1, "bt.RigidBody"));
        btTransform *rbAFrame = *((btTransform **)dub_checksdata(L, 2, "bt.Transform"));
        bool useReferenceFrameA = dub_checkboolean(L, 3);
        btHingeConstraint *retval__ = new btHingeConstraint(*rbA, *rbAFrame, useReferenceFrameA);
        dub_pushudata(L, retval__, "bt.HingeConstraint", true);
        return 1;
      } else {
        btRigidBody *rbA = *((btRigidBody **)dub_checksdata(L, 1, "bt.RigidBody"));
        btVector3 *pivotInA = *((btVector3 **)dub_checksdata(L, 2, "bt.Vector3"));
        btVector3 *axisInA = *((btVector3 **)dub_checksdata(L, 3, "bt.Vector3"));
        btHingeConstraint *retval__ = new btHingeConstraint(*rbA, *pivotInA, *axisInA);
        dub_pushudata(L, retval__, "bt.HingeConstraint", true);
        return 1;
      }
    } else {
      btRigidBody *rbA = *((btRigidBody **)dub_checksdata(L, 1, "bt.RigidBody"));
      btTransform *rbAFrame = *((btTransform **)dub_checksdata(L, 2, "bt.Transform"));
      btHingeConstraint *retval__ = new btHingeConstraint(*rbA, *rbAFrame);
      dub_pushudata(L, retval__, "bt.HingeConstraint", true);
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "btHingeConstraint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "btHingeConstraint: Unknown exception");
  }
  return dub_error(L);
}

/** void btHingeConstraint::enableAngularMotor(bool enableMotor, btScalar targetVelocity, btScalar maxMotorImpulse)
 * bind/btHingeConstraint.h:28
 */
static int btHingeConstraint_enableAngularMotor(lua_State *L) {
  try {
    btHingeConstraint *self = *((btHingeConstraint **)dub_checksdata(L, 1, "bt.HingeConstraint"));
    bool enableMotor = dub_checkboolean(L, 2);
    btScalar targetVelocity = dub_checknumber(L, 3);
    btScalar maxMotorImpulse = dub_checknumber(L, 4);
    self->enableAngularMotor(enableMotor, targetVelocity, maxMotorImpulse);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "enableAngularMotor: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "enableAngularMotor: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int btHingeConstraint___tostring(lua_State *L) {
  btHingeConstraint *self = *((btHingeConstraint **)dub_checksdata_n(L, 1, "bt.HingeConstraint"));
  lua_pushfstring(L, "bt.HingeConstraint: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg btHingeConstraint_member_methods[] = {
  { "__gc"         , btHingeConstraint__btHingeConstraint },
  { "_cast_"       , btHingeConstraint__cast_ },
  { "new"          , btHingeConstraint_btHingeConstraint },
  { "enableAngularMotor", btHingeConstraint_enableAngularMotor },
  { "__tostring"   , btHingeConstraint___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_bt_HingeConstraint(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "bt.HingeConstraint");
  // <mt>

  // register member methods
  luaL_register(L, NULL, btHingeConstraint_member_methods);
  // save meta-table in bt
  dub_register(L, "bt", "HingeConstraint", "HingeConstraint");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
