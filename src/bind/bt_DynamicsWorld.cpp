/**
 *
 * MACHINE GENERATED FILE. DO NOT EDIT.
 *
 * Bindings for class btDynamicsWorld
 *
 * This file has been generated by dub 2.1.~.
 */
#include "dub/dub.h"
#include "BulletDynamics/Dynamics/btDynamicsWorld.h"


/** virtual btDynamicsWorld::~btDynamicsWorld()
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:59
 */
static int btDynamicsWorld__btDynamicsWorld(lua_State *L) {
  try {
    DubUserdata *userdata = ((DubUserdata*)dub_checksdata_d(L, 1, "bt.DynamicsWorld"));
    if (userdata->gc) {
      btDynamicsWorld *self = (btDynamicsWorld *)userdata->ptr;
      delete self;
    }
    userdata->gc = false;
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "~btDynamicsWorld: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "~btDynamicsWorld: Unknown exception");
  }
  return dub_error(L);
}

/** virtual int btDynamicsWorld::stepSimulation(btScalar timeStep, int maxSubSteps=1, btScalar fixedTimeStep=btScalar(1.)/btScalar(60.))=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:66
 */
static int btDynamicsWorld_stepSimulation(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      btScalar timeStep = dub_checknumber(L, 2);
      int maxSubSteps = dub_checkint(L, 3);
      btScalar fixedTimeStep = dub_checknumber(L, 4);
      lua_pushnumber(L, self->stepSimulation(timeStep, maxSubSteps, fixedTimeStep));
      return 1;
    } else if (top__ >= 3) {
      btScalar timeStep = dub_checknumber(L, 2);
      int maxSubSteps = dub_checkint(L, 3);
      lua_pushnumber(L, self->stepSimulation(timeStep, maxSubSteps));
      return 1;
    } else {
      btScalar timeStep = dub_checknumber(L, 2);
      lua_pushnumber(L, self->stepSimulation(timeStep));
      return 1;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "stepSimulation: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "stepSimulation: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btDynamicsWorld::debugDrawWorld()=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:68
 */
static int btDynamicsWorld_debugDrawWorld(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    self->debugDrawWorld();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "debugDrawWorld: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "debugDrawWorld: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btDynamicsWorld::addConstraint(btTypedConstraint *constraint, bool disableCollisionsBetweenLinkedBodies=false)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:71
 */
static int btDynamicsWorld_addConstraint(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    int top__ = lua_gettop(L);
    if (top__ >= 3) {
      btTypedConstraint *constraint = *((btTypedConstraint **)dub_checksdata(L, 2, "TypedConstraint"));
      bool disableCollisionsBetweenLinkedBodies = dub_checkboolean(L, 3);
      self->addConstraint(constraint, disableCollisionsBetweenLinkedBodies);
      return 0;
    } else {
      btTypedConstraint *constraint = *((btTypedConstraint **)dub_checksdata(L, 2, "TypedConstraint"));
      self->addConstraint(constraint);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "addConstraint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addConstraint: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btDynamicsWorld::removeConstraint(btTypedConstraint *constraint)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:75
 */
static int btDynamicsWorld_removeConstraint(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    btTypedConstraint *constraint = *((btTypedConstraint **)dub_checksdata(L, 2, "TypedConstraint"));
    self->removeConstraint(constraint);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeConstraint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeConstraint: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btDynamicsWorld::addAction(btActionInterface *action)=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:77
 */
static int btDynamicsWorld_addAction(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    btActionInterface *action = *((btActionInterface **)dub_checksdata(L, 2, "ActionInterface"));
    self->addAction(action);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addAction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addAction: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btDynamicsWorld::removeAction(btActionInterface *action)=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:79
 */
static int btDynamicsWorld_removeAction(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    btActionInterface *action = *((btActionInterface **)dub_checksdata(L, 2, "ActionInterface"));
    self->removeAction(action);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeAction: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeAction: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btDynamicsWorld::setGravity(const btVector3 &gravity)=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:83
 */
static int btDynamicsWorld_setGravity(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    btVector3 *gravity = *((btVector3 **)dub_checksdata(L, 2, "bt.Vector3"));
    self->setGravity(*gravity);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setGravity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setGravity: Unknown exception");
  }
  return dub_error(L);
}

/** virtual btVector3 btDynamicsWorld::getGravity() const =0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:84
 */
static int btDynamicsWorld_getGravity(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    dub_pushudata(L, new btVector3(self->getGravity()), "bt.Vector3", true);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getGravity: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getGravity: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btDynamicsWorld::synchronizeMotionStates()=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:86
 */
static int btDynamicsWorld_synchronizeMotionStates(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    self->synchronizeMotionStates();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "synchronizeMotionStates: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "synchronizeMotionStates: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btDynamicsWorld::addRigidBody(btRigidBody *body)=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:88
 */
static int btDynamicsWorld_addRigidBody(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      btRigidBody *body = *((btRigidBody **)dub_checksdata(L, 2, "bt.RigidBody"));
      short group = dub_checkint(L, 3);
      short mask = dub_checkint(L, 4);
      self->addRigidBody(body, group, mask);
      return 0;
    } else {
      btRigidBody *body = *((btRigidBody **)dub_checksdata(L, 2, "bt.RigidBody"));
      self->addRigidBody(body);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "addRigidBody: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addRigidBody: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btDynamicsWorld::removeRigidBody(btRigidBody *body)=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:92
 */
static int btDynamicsWorld_removeRigidBody(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    btRigidBody *body = *((btRigidBody **)dub_checksdata(L, 2, "bt.RigidBody"));
    self->removeRigidBody(body);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeRigidBody: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeRigidBody: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btDynamicsWorld::setConstraintSolver(btConstraintSolver *solver)=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:94
 */
static int btDynamicsWorld_setConstraintSolver(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    btConstraintSolver *solver = *((btConstraintSolver **)dub_checksdata(L, 2, "bt.ConstraintSolver"));
    self->setConstraintSolver(solver);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setConstraintSolver: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setConstraintSolver: Unknown exception");
  }
  return dub_error(L);
}

/** virtual btConstraintSolver* btDynamicsWorld::getConstraintSolver()=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:96
 */
static int btDynamicsWorld_getConstraintSolver(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    btConstraintSolver *retval__ = self->getConstraintSolver();
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "bt.ConstraintSolver", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getConstraintSolver: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getConstraintSolver: Unknown exception");
  }
  return dub_error(L);
}

/** virtual int btDynamicsWorld::getNumConstraints() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:98
 */
static int btDynamicsWorld_getNumConstraints(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    lua_pushnumber(L, self->getNumConstraints());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getNumConstraints: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getNumConstraints: Unknown exception");
  }
  return dub_error(L);
}

/** virtual btTypedConstraint* btDynamicsWorld::getConstraint(int index)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:100
 */
static int btDynamicsWorld_getConstraint(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    int index = dub_checkint(L, 2);
    btTypedConstraint *retval__ = self->getConstraint(index);
    if (!retval__) return 0;
    dub_pushudata(L, retval__, "TypedConstraint", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getConstraint: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getConstraint: Unknown exception");
  }
  return dub_error(L);
}

/** virtual btDynamicsWorldType btDynamicsWorld::getWorldType() const =0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:104
 */
static int btDynamicsWorld_getWorldType(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    lua_pushnumber(L, self->getWorldType());
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getWorldType: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getWorldType: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btDynamicsWorld::clearForces()=0
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:106
 */
static int btDynamicsWorld_clearForces(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    self->clearForces();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "clearForces: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "clearForces: Unknown exception");
  }
  return dub_error(L);
}

/** void btDynamicsWorld::setInternalTickCallback(btInternalTickCallback cb, void *worldUserInfo=0, bool isPreTick=false)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:110
 */
static int btDynamicsWorld_setInternalTickCallback(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    int top__ = lua_gettop(L);
    if (top__ >= 4) {
      btInternalTickCallback *cb = *((btInternalTickCallback **)dub_checksdata(L, 2, "InternalTickCallback"));
      void *worldUserInfo = *((void **)dub_checksdata(L, 3, "void"));
      bool isPreTick = dub_checkboolean(L, 4);
      self->setInternalTickCallback(*cb, worldUserInfo, isPreTick);
      return 0;
    } else if (top__ >= 3) {
      btInternalTickCallback *cb = *((btInternalTickCallback **)dub_checksdata(L, 2, "InternalTickCallback"));
      void *worldUserInfo = *((void **)dub_checksdata(L, 3, "void"));
      self->setInternalTickCallback(*cb, worldUserInfo);
      return 0;
    } else {
      btInternalTickCallback *cb = *((btInternalTickCallback **)dub_checksdata(L, 2, "InternalTickCallback"));
      self->setInternalTickCallback(*cb);
      return 0;
    }
  } catch (std::exception &e) {
    lua_pushfstring(L, "setInternalTickCallback: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setInternalTickCallback: Unknown exception");
  }
  return dub_error(L);
}

/** void btDynamicsWorld::setWorldUserInfo(void *worldUserInfo)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:122
 */
static int btDynamicsWorld_setWorldUserInfo(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    void *worldUserInfo = *((void **)dub_checksdata(L, 2, "void"));
    self->setWorldUserInfo(worldUserInfo);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "setWorldUserInfo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "setWorldUserInfo: Unknown exception");
  }
  return dub_error(L);
}

/** void* btDynamicsWorld::getWorldUserInfo() const
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:127
 */
static int btDynamicsWorld_getWorldUserInfo(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    self->getWorldUserInfo();
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getWorldUserInfo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getWorldUserInfo: Unknown exception");
  }
  return dub_error(L);
}

/** btContactSolverInfo& btDynamicsWorld::getSolverInfo()
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:132
 */
static int btDynamicsWorld_getSolverInfo(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    dub_pushudata(L, &self->getSolverInfo(), "ContactSolverInfo", false);
    return 1;
  } catch (std::exception &e) {
    lua_pushfstring(L, "getSolverInfo: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "getSolverInfo: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btDynamicsWorld::addVehicle(btActionInterface *vehicle)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:138
 */
static int btDynamicsWorld_addVehicle(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    btActionInterface *vehicle = *((btActionInterface **)dub_checksdata(L, 2, "ActionInterface"));
    self->addVehicle(vehicle);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addVehicle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addVehicle: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btDynamicsWorld::removeVehicle(btActionInterface *vehicle)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:140
 */
static int btDynamicsWorld_removeVehicle(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    btActionInterface *vehicle = *((btActionInterface **)dub_checksdata(L, 2, "ActionInterface"));
    self->removeVehicle(vehicle);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeVehicle: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeVehicle: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btDynamicsWorld::addCharacter(btActionInterface *character)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:142
 */
static int btDynamicsWorld_addCharacter(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    btActionInterface *character = *((btActionInterface **)dub_checksdata(L, 2, "ActionInterface"));
    self->addCharacter(character);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "addCharacter: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "addCharacter: Unknown exception");
  }
  return dub_error(L);
}

/** virtual void btDynamicsWorld::removeCharacter(btActionInterface *character)
 * src/vendor/bullet/src/BulletDynamics/Dynamics/btDynamicsWorld.h:144
 */
static int btDynamicsWorld_removeCharacter(lua_State *L) {
  try {
    btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata(L, 1, "bt.DynamicsWorld"));
    btActionInterface *character = *((btActionInterface **)dub_checksdata(L, 2, "ActionInterface"));
    self->removeCharacter(character);
    return 0;
  } catch (std::exception &e) {
    lua_pushfstring(L, "removeCharacter: %s", e.what());
  } catch (...) {
    lua_pushfstring(L, "removeCharacter: Unknown exception");
  }
  return dub_error(L);
}



// --=============================================== __tostring
static int btDynamicsWorld___tostring(lua_State *L) {
  btDynamicsWorld *self = *((btDynamicsWorld **)dub_checksdata_n(L, 1, "bt.DynamicsWorld"));
  lua_pushfstring(L, "bt.DynamicsWorld: %p", self);
  
  return 1;
}

// --=============================================== METHODS

static const struct luaL_Reg btDynamicsWorld_member_methods[] = {
  { "__gc"         , btDynamicsWorld__btDynamicsWorld },
  { "stepSimulation", btDynamicsWorld_stepSimulation },
  { "debugDrawWorld", btDynamicsWorld_debugDrawWorld },
  { "addConstraint", btDynamicsWorld_addConstraint },
  { "removeConstraint", btDynamicsWorld_removeConstraint },
  { "addAction"    , btDynamicsWorld_addAction },
  { "removeAction" , btDynamicsWorld_removeAction },
  { "setGravity"   , btDynamicsWorld_setGravity },
  { "getGravity"   , btDynamicsWorld_getGravity },
  { "synchronizeMotionStates", btDynamicsWorld_synchronizeMotionStates },
  { "addRigidBody" , btDynamicsWorld_addRigidBody },
  { "removeRigidBody", btDynamicsWorld_removeRigidBody },
  { "setConstraintSolver", btDynamicsWorld_setConstraintSolver },
  { "getConstraintSolver", btDynamicsWorld_getConstraintSolver },
  { "getNumConstraints", btDynamicsWorld_getNumConstraints },
  { "getConstraint", btDynamicsWorld_getConstraint },
  { "getWorldType" , btDynamicsWorld_getWorldType },
  { "clearForces"  , btDynamicsWorld_clearForces },
  { "setInternalTickCallback", btDynamicsWorld_setInternalTickCallback },
  { "setWorldUserInfo", btDynamicsWorld_setWorldUserInfo },
  { "getWorldUserInfo", btDynamicsWorld_getWorldUserInfo },
  { "getSolverInfo", btDynamicsWorld_getSolverInfo },
  { "addVehicle"   , btDynamicsWorld_addVehicle },
  { "removeVehicle", btDynamicsWorld_removeVehicle },
  { "addCharacter" , btDynamicsWorld_addCharacter },
  { "removeCharacter", btDynamicsWorld_removeCharacter },
  { "__tostring"   , btDynamicsWorld___tostring },
  { "deleted"      , dub_isDeleted        },
  { NULL, NULL},
};


extern "C" int luaopen_bt_DynamicsWorld(lua_State *L)
{
  // Create the metatable which will contain all the member methods
  luaL_newmetatable(L, "bt.DynamicsWorld");
  // <mt>

  // register member methods
  luaL_register(L, NULL, btDynamicsWorld_member_methods);
  // save meta-table in bt
  dub_register(L, "bt", "DynamicsWorld", "DynamicsWorld");
  // <mt>
  lua_pop(L, 1);
  return 0;
}
